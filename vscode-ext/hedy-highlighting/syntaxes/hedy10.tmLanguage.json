{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "hedy10",
	"patterns": [
		{
			"name": "invalid.illegal.character.hedy10",
			"match": "\\b_\\b"
		},
		{
			"name": "comment.line.hedy10",
			"match": "#.*"
		},
		{
			"name": "inline.quoted.conditional.element.hedy10",
			"match": "(?<=\\bif) +(\\w+)( +is +| +in +| *= *)(\\w+)",
			"captures": {
				"1": {
					"name": "string.regexp.hedy10",
					"patterns": [
						{
							"include": "#inside_comp"
						}
					]
				},
				"2": {
					"name": "keyword.command.hedy10"
				},
				"3": {
					"name": "string.regexp.hedy10",
					"patterns": [
						{
							"include": "#inside_comp"
						}
					]
				}
			}
		},
		{
			"include": "#commands"
		},
		{
			"name": "string.quoted.double.hedy10",
			"begin": "\"",
			"end": "\""
		},
		{
			"name": "string.quoted.single.hedy10",
			"begin": "'",
			"end": "'"
		},
		
		{
			"name": "array.hedy10",
			"begin": "(?<=\\b\\w+( +is | *= *))(?=.*,)(?!.*ask)",
			"end": "(?=#|$)",
			"patterns": [
				{
					"name": "constant.numeric.hedy10",
					"match": " *[0-9]+"
				},
				{
					"name": "string.regexp.hedy10",
					"match": "\\b(\\w+)\\b"
				},
				
				{
					"name": "invalid.illegal.hedy10",
					"match": ", *$"
				},
				{
					"name": "keyword.command.comma.separator.hedy10",
					"match": ","
				}
			]
		},
		{ 
			"name": "inline.quoted.array.element.hedy10",
			"begin": "(?<=\\b(remove) )",
			"end": "(?=\\b(from))|$",
			"patterns": [
				{
					"name": "constant.numeric.hedy10",
					"match": " *[0-9]+"
				},
				{
					"name": "string.regexp.hedy10",
					"match": "\\b(\\w+)\\b"
				}
			]

		},
		{ 
			"name": "inline.quoted.array.element.hedy10",
			"begin": "(?<=\\b(add) )",
			"end": "(?=\\b(to))|$",
			"patterns": [
				{
					"name": "constant.numeric.hedy10",
					"match": " *[0-9]+"
				},
				{
					"name": "string.regexp.hedy10",
					"match": "\\b(\\w+)\\b"
				}
			]
		},

		{
			"begin": "(?<=\\bplay\\b)",
			"end": "(?=#|$)",
			"patterns": [
				{
					"name": "support.class.note.hedy10",
					"match": "\\b(?:C[0-9]|D[0-9]|E[0-9]|F[0-9]|G[0-9]|A[0-9]|B[0-9]|[1-6][0-9]|70|[1-9]|[A-G])\\b"
				}
			]
		},
		{
			"name": "constant.numeric.hedy10",
			"match": "[0-9]+"
		},
		{
			"name": "keyword.command.hedy10",
			"match": "\\b(is|at|to|from|in|not)\\b|="
		},
		{
			"include": "#maths"
		},
		{
			"name": "support.function.hedy10",
			"match": "\\b(random)\\b"
		}
	],
	"repository": {
		"commands": {
			"patterns": [
			{
				"name": "keyword.control.conditional.hedy10",
				"match": "\\b(if|else)\\b"
			},
			{
				"name": "keyword.control.iterative.hedy10",
				"match": "\\b(repeat|times|for)\\b"
			},
			{
				"name": "support.function.ask.hedy10",
				"match": "\\bask\\b"
			},
			{
				"name": "support.function.clear.hedy10",
				"match": "\\bclear\\b"
			},
			{
				"name": "support.function.print.hedy10",
				"match": "\\bprint\\b"
			},
			{
				"name": "support.function.play.hedy10",
				"match": "\\bplay\\b"
			},
			{
				"name": "support.function.sleep.hedy10",
				"match": "\\bsleep\\b"
			},
			{
				"name": "support.function.add.hedy10",
				"match": "\\badd\\b"
			},
			{
				"name": "support.function.remove.hedy10",
				"match": "\\bremove\\b"
			},
			{
				"match": "\\b(color) +\\b(blue|green|red|black|brown|gray|orange|pink|purple|white|yellow)\\b",
				"captures": {
					"1": {
						"name": "support.function.turtle.hedy10"
					},
					"2": {
						"name": "support.class.color.hedy10"
					}
				}

			},
			{
				"name": "support.function.turtle.hedy10",
				"match": "\\b(forward|turn|color)\\b"
			},
			{
				"name": "support.class.pressed.hedy10",
				"match": "\\b(pressed)\\b"
			}
			]
		},
		"inside_comp":{
			"patterns": [
				{
					"name": "support.class.pressed.hedy10",
					"match": "\\bpressed\\b"
				},
				{
					"include": "#unquoted_phrase"
				}
			]
		},
		"maths":{ 
			"patterns": [
				{
					"name": "keyword.command.hedy10",
					"match": " *[+\\-*\\/] *"
				},
				{
					"name": "invalid.illegal.math.hedy10",
					"match": "(?<=\\d) *[+\\-*\\/] *(?=[\\w\"'])"
				}
			]
		},
		
		"unquoted_phrase":{
			"patterns": [
				
				{
					"name": "comment.line.hedy10",
					"match": "#.*"
				},
				{
					"name": "constant.numeric.hedy10",
					"match": " *[0-9]+"
				},
				{
					"name": "string.regexp.hedy10",
					"begin": ".+?(?=#|$)",
					"end": "(?=#|$)"
				}
			]
		}
	},
	"scopeName": "source.hedy10"
}